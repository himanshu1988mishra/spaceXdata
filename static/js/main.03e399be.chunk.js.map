{"version":3,"sources":["components/sidebar/sidebar.js","components/Card/card.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","props","useState","btnValues","Fragment","className","map","year","key","value","onClick","filter","Card","flights","flight","flight_number","src","links","mission_patch_small","alt","mission_name","mission_id","id","launch_date_local","launch_year","launch_success","rocket","first_stage","cores","land_success","App","setFlights","useEffect","fetch","then","res","json","result","FYear","Filtered","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kPAuCeA,MArCf,SAAiBC,GAEf,IAFsB,EAGFC,mBADN,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,SACxHC,EAHe,oBAKtB,OACE,kBAAC,IAAMC,SAAP,KACE,uCACA,yBAAKC,UAAU,WACb,0CACA,yBAAKA,UAAU,eAEXF,EAAUG,KAAI,SAAAC,GAAI,OACd,4BAAQC,IAAKD,EAAME,MAAOF,EAAMG,QAAST,EAAMU,QAC5CJ,OAOX,gDACA,yBAAKF,UAAU,eACb,4BAAQI,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,UAGF,iDACA,yBAAKJ,UAAU,eACb,4BAAQI,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,aCMKG,MApCf,YAA0B,IAAXC,EAAU,EAAVA,QAEb,OACE,kBAAC,IAAMT,SAAP,KAEIS,EAAQP,KAAI,SAAAQ,GACV,OACE,6BAASN,IAAKM,EAAOC,eACnB,6BACE,yBAAKC,IAAKF,EAAOG,MAAMC,oBAAqBC,IAAI,WAChD,4BAAKL,EAAOM,aAAZ,KAA4BN,EAAOC,eACnC,2BACE,iDAEF,4BACCD,EAAOO,WAAWf,KAAI,SAAAgB,GAAE,OAAI,wBAAId,IAAKM,EAAOS,mBAAoBD,OAGjE,2BACE,iDADF,IACkCR,EAAOU,aAEzC,2BACE,uDADF,IACwCV,EAAOW,gBAE/C,2BACE,wDADF,IACyCX,EAAOY,OAAOC,YAAYC,MAAM,GAAGC,qBCQ7EC,MA9Bf,WAAgB,IAAD,EAEe5B,mBAAS,IAFxB,mBAERW,EAFQ,KAECkB,EAFD,KAeb,OAXAC,qBAAU,WACRC,MAAM,oDACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAM,OAAIN,EAAWM,QAC1B,IAQD,yBAAKhC,UAAU,OACb,sDACA,8BACE,+BACE,kBAAC,EAAD,CAASM,OAAQ,kBAVR,SAAAJ,GACf,IAAI+B,EAAQzB,EAAQF,QAAO,SAAAG,GAAM,OAAIA,EAAOU,cAAgBjB,KAC5DwB,EAAWO,GAQkBC,CAAS,YAElC,iCACE,kBAAC,EAAD,CAAM1B,QAASA,QChBL2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.03e399be.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nfunction Sidebar(props) {\r\n\r\n  const years = ['2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020']\r\n  const [btnValues] = useState(years)\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h3>Filters</h3>\r\n      <div className=\"filters\">\r\n        <p>Launch Year</p>\r\n        <div className=\"filter-btns\">\r\n          {\r\n            btnValues.map(year => (\r\n                <button key={year} value={year} onClick={props.filter}>\r\n                  {year}\r\n                </button>\r\n              )\r\n            )\r\n          }\r\n        </div>\r\n        \r\n        <p>Successful Launch</p>\r\n        <div className=\"filter-btns\">\r\n          <button value=\"True\">True</button>\r\n          <button value=\"False\">False</button>\r\n        </div>\r\n        \r\n        <p>Successful Landing</p>\r\n        <div className=\"filter-btns\">\r\n          <button value=\"True\">True</button>\r\n          <button value=\"False\">False</button>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react'\r\n\r\nfunction Card({flights}) {\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        flights.map(flight => {\r\n          return (\r\n            <article key={flight.flight_number}>\r\n              <div>\r\n                <img src={flight.links.mission_patch_small} alt=\"Flight\" />\r\n                <h2>{flight.mission_name} #{flight.flight_number}</h2>\r\n                <p>\r\n                  <strong>Mission Ids:</strong>\r\n                </p>\r\n                <ul>\r\n                {flight.mission_id.map(id => <li key={flight.launch_date_local}>{id}</li>)}\r\n                </ul>\r\n                \r\n                <p>\r\n                  <strong>Launch Year: </strong> {flight.launch_year}\r\n                </p>\r\n                <p>\r\n                  <strong>Successful Launch: </strong> {flight.launch_success}\r\n                </p>\r\n                <p>\r\n                  <strong>Successful Landing: </strong> {flight.rocket.first_stage.cores[0].land_success}\r\n                </p>\r\n              </div>\r\n            </article>\r\n          )\r\n        })\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Sidebar from './components/sidebar/sidebar'\nimport Card from './components/Card/card';\n\nfunction App() {\n  \n  let [flights, setFlights] = useState([])\n\n  useEffect(() => {\n    fetch('https://api.spacexdata.com/v3/launches?limit=100')\n    .then(res => res.json())\n    .then(result => setFlights(result))\n  }, [])\n\n  const Filtered = year => {\n    let FYear = flights.filter(flight => flight.launch_year === year)\n    setFlights(FYear)\n  }\n  \n  return (\n    <div className=\"App\">\n      <h1>SpaceX Launch Programs</h1>\n      <main>\n        <aside>\n          <Sidebar filter={() => Filtered('2006')} />\n        </aside>\n        <section>\n          <Card flights={flights} />\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}